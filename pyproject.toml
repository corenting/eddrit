[project]
name = "eddrit"
version = "0.11"
description = "Alternative Reddit frontend"
authors = [
    { name = "corenting", email = "corenting@gmail.com" },
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.13,<4.0"

dependencies = [
    "aiofiles (>=24.0.0,<25.0.0)",
    "environs (>=11.0.0,<12.0.0)",
    "gunicorn (>=23.0.0,<24.0.0)",  # if needed for deployment configs
    "httpx[http2] (>=0.28.1,<1.0.0)",
    "jinja2 (>=3.1.5,<4.0.0)",
    "loguru (>=0.7.0,<1.0.0)",
    "lxml (>=5.3.0,<6.0.0)",
    "python-multipart (>=0.0.20,<1.0.0)", # required by starlette for the form (as used in settings page)
    "starlette (>=0.45.2,<1.0.0)",
    "timeago (>=1.0.0,<2.0.0)",
    "tldextract (>=5.1.3,<6.0.0)",
    "uvicorn[standard] (>=0.34.0,<1.0.0)",
    "valkey (>=6.0.0,<7.0.0)",
]

[tool.poetry.group.dev.dependencies]
coverage = {version = "*", extras = ["toml"]}
pyright = "*"
pytest = "*"
pytest-cov = "*"
ruff = "*"

[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), flake8-print (T20), ruff rules (RUF),
# flake8-comprehensions (C4), flake8-datetimez (DTZ), isort (I), pep8-naming (N)
# pyupgrade (UP), flake8-async (ASYNC), flake8-bandit (S), perflint (PERF),
# tryceratops (SIM)
select = ["E", "F", "T20", "RUF", "C4", "DTZ", "I", "N", "UP", "ASYNC", "S", "PERF", "SIM"]
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"app.py" = ["S104"] # binding on all interfaces for dev

[tool.coverage.run]
omit = ["eddrit/config.py"]

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
